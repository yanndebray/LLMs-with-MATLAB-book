Humans have expressed themselves using natural language for thousands of years and have written down their thoughts and feelings. Recent technological advances enable the automation of analyzing and extracting information from written language. Sentiment analysis deals with the classification of opinions or emotions in text. You can classify the emotional tone of the text as positive, negative, or neutral. The tone is not always so easy to classify, especially when the text contains slang or sarcasm or the context changes the tone. Sentiment analysis is widely used across many applications to inform trading strategies and for market and health research to name a few. It can empower businesses to make better decisions. For example, you can track user sentiment from the moment a product or feature is launched to make faster decisions on the future of the product. The data can come from social media, online reviews, and direct customer feedback. Imagine how much time and effort it would take to read and analyze all this data manually. So can the process be automated? And how do you teach a computer to understand language with all its nuances and expressions and recognize human emotions in text? The main building blocks for automating sentiment analysis are data preparation and a classifier. Intricate language data must be converted to a structured format that the classifier can process. A common data preparation step is tokenization, that is representing the input text as a collection of tokens. A token is a sequence of characters that is used for processing. Tokens are essentially the features that you feed into the classifier. How you prepare your data depends on the type and predictive power of your classifier. So you might need to do additional preprocessing. Now that your text data is in the right format, you can choose a classifier that will be able to accurately predict sentiment. In rule-based sentiment analysis, the algorithm automatically labels the input data based on a set of predefined rules. Rule-based systems are simple to understand and implement, as simple as compiling a list of positive and negative words and then counting how many times these words appear in the text. More elaborate rule-based systems have been developed, but they still lack in flexibility compared to AI models. AI models are typically more accurate and are able to learn different explicit and implicit patterns in the data. A sentiment analysis model is built by a supervised machine learning algorithm. Similar to other classifiers, like those for image data, the model is trained with a large enough data set and the corresponding labels. After the model is trained, you can use it for classification. During the inference phase, the model predicts the right label for its input. For sentiment analysis, you can use classical machine learning algorithms, like decision trees, or you can use deep learning architectures, like convolutional neural networks. Obviously, we have to talk about large language models. LLMs are a special case of deep learning models. Well-known LLMs include BERT and GPT. Because of their underlying transformer architecture, they can capture complex relationships between words and nuances present in human language, so they are more likely to correctly classify emotions based on context. But how do you choose an AI model for your sentiment analysis task? LLMs have great predictive power and can yield very accurate results. However, they are large-- as the name suggests-- complex, and require large amounts of training data. More training data means more training time and requires access to high-end hardware. A way around this is fine tuning. It means tweaking a pretrained model for a different task. Fine tuning allows you to use a smaller data set to retrain a large model and still achieve great accuracy. For example, you can add additional layers to BERT and retrain it with a small data set to perform sentiment analysis. But even with fine tuning, you can't change the model size and complexity and the decision-making process of a large model can be difficult to understand. Depending on your application, you could choose a simpler model or use techniques that help you interpret the decisions. Sentiment analysis automates classifying emotions in large text data sets. By leveraging AI, you can accurately classify emotions in difficult and diverse scenarios. You have many options of classifiers to choose from, depending on your requirements. Check out our AI video playlist to learn more about natural language processing, how to apply machine learning and deep learning, and how to use AI in MATLAB in engineering applications.